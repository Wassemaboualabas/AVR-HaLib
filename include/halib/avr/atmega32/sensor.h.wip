
/// Pseudo interface to be implemented by Sensors
template<class ReturnType> class Sensor
{
protected:
	ReturnType value;
public:
	Sensor(){}
	
	/// returns true if process started by startGetValue() had been completed.
	bool isReady(){return true;}
	
	/// returns true if value-getting-process could be started
	bool startGetValue()
	{
		//here the process of getting the realworld-value to this.value schould be started
		return true;
	}
	
	/// returns true if isReady() and writes gotten realworld-value to value
	bool getCachedValue(ReturnType &value)
	{
		if(isReady())
		{
			value = this.value;
			return true;
		}
		else	
			return false;
	}
};

struct hallo{};

struct SensorConfig:public ADC_Regmap
{
	enum
	{
		mux = 2;
		refV = ADC::ref_avcc;
		//prescaler = ADC:ps_none;
	};
}


template<class ReturnType,class SensorConfig> class AnalogSensor: private AnalogDigitalConverterInterrupt<Return_Type,SensorConfig,SensorConfig>
{
protected:
	ReturnType value;
public:
	AnalogSensor(){}
	
	/// returns true if process started by startGetValue() had been completed.
	bool isReady(){return AnalogDigitalConverterInterrupt<Return_Type,SensorConfig,SensorConfig>::isThatTarget(value)}
	
	/// returns true if value-getting-process could be started
	bool startGetValue()
	{
		//here the process of getting the realworld-value to this.value schould be started
		return AnalogDigitalConverterInterrupt<Return_Type,SensorConfig,SensorConfig>::getValue(value, SensorConfig::mux, SensorConfig::refV, uint8_t prescaler);
	}
	
	/// returns true if isReady() and writes gotten realworld-value to value
	bool getCachedValue(ReturnType &value)
	{
		if(isReady())
		{
			value = this.value;
			return true;
		}
		else	
			return false;
	}
};


analogsensor<liksdiast> linkers;




template<class SensorConfig> class AnalogSensor
{
	protected:
		uint8_t value;
		
		const uint8_t connect;

	public:
		/*! Konstruktor.
		*	\param connectTo	Nummer des analogen Eingangs (MUX, 0-3).
		*/
		AnalogSensor(const uint8_t connectTo);
		
		bool startGetValue()
		{return getValue(Return_Type &target, uint8_t mux,uint8_t reference ,uint8_t prescaler);}
};