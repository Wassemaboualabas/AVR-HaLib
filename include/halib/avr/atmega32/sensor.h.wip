
/// Pseudo interface to be implemented by Sensors
template<class ReturnType> class Sensor
{
protected:
	ReturnType value;
public:
	Sensor(){}
	
	/// returns true if process started by startGetValue() had been completed.
	bool isReady(){return true;}
	
	/// returns true if value-getting-process could be started
	bool startGetValue()
	{
		//here the process of getting the realworld-value to this.value schould be started
		return true;
	}
	
	/// returns true if isReady() and writes gotten realworld-value to value
	bool getCachedValue(ReturnType &value)
	{
		if(isReady())
		{
			value = this.value;
			return true;
		}
		else	
			return false;
	}
};

/*! \class AnalogSensor
 *	\brief Implementiert Sensor-Interface f&uuml;r analoge Eing&auml;nge.
 *	\see \ref halibsensoren
 */
class AnalogSensor : public Sensor
{
	protected:
		const uint8_t connect;

	public:
		/*! Konstruktor.
		*	\param connectTo	Nummer des analogen Eingangs (MUX, 0-3).
		*/
		AnalogSensor(const uint8_t connectTo);
		
		bool startGetValue();
};
