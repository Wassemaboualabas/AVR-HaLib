/* PortMap header for avr-halib
 * generated by avr-pmgen 0.05 from test.portmap
 * 
 * Do not modify this file unless you really know what you are doing! * Changetest.portmap ...
 * 
 */

#include <stdint.h>


class Button0
{
public:
	enum { pressedLevel = false, usePullup = true };
	bool : 4;
	bool pinButton: 1;		// PINA, bit 4
	bool : 7;
	bool ddrButton: 1;		// DDRA, bit 4
	bool : 7;
	bool portButton: 1;		// PORTA, bit 4
};

class Button1
{
public:
	enum { pressedLevel = false, usePullup = true };
	bool : 5;
	bool pinButton: 1;		// PINA, bit 5
	bool : 7;
	bool ddrButton: 1;		// DDRA, bit 5
	bool : 7;
	bool portButton: 1;		// PORTA, bit 5
};

class Button2
{
public:
	enum { pressedLevel = false, usePullup = true };
	bool : 6;
	bool pinButton: 1;		// PINA, bit 6
	bool : 7;
	bool ddrButton: 1;		// DDRA, bit 6
	bool : 7;
	bool portButton: 1;		// PORTA, bit 6
};

class Button3
{
public:
	enum { pressedLevel = false, usePullup = true };
	bool : 7;
	bool pinButton: 1;		// PINA, bit 7
	bool : 7;
	bool ddrButton: 1;		// DDRA, bit 7
	bool : 7;
	bool portButton: 1;		// PORTA, bit 7
};

class Led0
{
public:
	enum { onLevel = true };
	bool pinLed: 1;		// PINA, bit 0
	bool : 7;
	bool ddrLed: 1;		// DDRA, bit 0
	bool : 7;
	bool portLed: 1;		// PORTA, bit 0
};

class Led1
{
public:
	enum { onLevel = true };
	bool : 1;
	bool pinLed: 1;		// PINA, bit 1
	bool : 7;
	bool ddrLed: 1;		// DDRA, bit 1
	bool : 7;
	bool portLed: 1;		// PORTA, bit 1
};

class Led2
{
public:
	enum { onLevel = true };
	bool : 2;
	bool pinLed: 1;		// PINA, bit 2
	bool : 7;
	bool ddrLed: 1;		// DDRA, bit 2
	bool : 7;
	bool portLed: 1;		// PORTA, bit 2
};

class Led3
{
public:
	enum { onLevel = true };
	bool : 3;
	bool pinLed: 1;		// PINA, bit 3
	bool : 7;
	bool ddrLed: 1;		// DDRA, bit 3
	bool : 7;
	bool portLed: 1;		// PORTA, bit 3
};

class LedBlock0123
{
public:
	enum { onLevel = 0xff };
	union
	{
		struct Leds
		{
			uint8_t pinLed0123: 4;		// PINA, bit 0-3
			uint8_t : 4;
			uint8_t ddrLed0123: 4;		// DDRA, bit 0-3
			uint8_t : 4;
			uint8_t portLed0123: 4;	// PORTA, bit 0-3
			
			void setPin(uint8_t i)
			{
				pinLed0123 = i & 0xf;
			}
			uint8_t getPin()
			{
				return pinLed0123;
			}
			void setDdr(uint8_t i)
			{
				ddrLed0123 = i;
			}
			uint8_t getDdr()
			{
				return ddrLed0123;
			}
			void setPort(uint8_t i)
			{
				portLed0123 = i;
			}
			uint8_t getPort()
			{
				return portLed0123;
			}
		};
	};
};



class ButtonBlock0123
{
public:
	enum { pressedLevel = 0xff, usePullup = 0xff };
	uint8_t : 4;
	uint8_t pinButton0123: 4;	// PINA, bit 4-7
	uint8_t : 4;
	uint8_t ddrButton0123: 4;		// DDRA, bit 4-7
	uint8_t : 4;
	uint8_t portButton0123: 4;	// PORTA, bit 4-7

	void setButtonsPin(uint8_t i)
	{
		pinButton0123 = i;
	}
	uint8_t getButtonsPin()
	{
		return pinButton0123;
	}
	void setButtonsDdr(uint8_t i)
	{
		ddrButton0123 = i;
	}
	uint8_t getButtonsDdr()
	{
		return ddrButton0123;
	}
	void setButtonsPort(uint8_t i)
	{
		portButton0123 = i;
	}
	uint8_t getButtonsPort()
	{
		return portButton0123;
	}

};


#include <avr/io.h>

/// Uses Timer/Counter1
class RobbyMotorDriver
{
	/**	Timer/Counter1 in 8 bit PWM phase correct mode with output channels A and B
	 *	Clear OC1A/OC1B on compare-match when up- and set when down-counting
 	*/

	enum { ps0 = 0, ps1 = 1, ps8 = 2, ps64 = 3, ps256 = 4, ps1024 = 5, exClkFall = 6, exClkRise = 7 };

	void start()
	{
		// Clear OC1A/OC1B on compare-match when up- and set when down-counting
		TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
	}

	void stop()
	{
		// Normal Port Operation, OC1A/OC1B disconnected
		TCCR1A &= ~((1 << COM1A1) | (1 << COM1B1));
	}

	bool isRunning()
	{
		return TCCR1A & (1 << COM1A1);
	}

public:
	RobbyMotorDriver()
	{
		// set OC1A/OC1B pins as outputs
		DDRB |= (1 << 5) | (1 << 6);
	
		// Use Timer1 in Phase correct PWM (8 Bits) - mode 1
		TCCR1A = 0x01;
		TCCR1B = ps256 & 0x7;
		TCCR1C = 0;
	
		OCR1AL = 0;
		OCR1BL = 0;
	
		// direction pins for first motor as output
		DDRE |= (1<<2) | (1<<3);
		// direction pins for second motor as output
		DDRG |= (1<<0) | (1<<1);	
		
		setSpeedA(0);
		setSpeedB(0);
	
		setForwardA(true);
		setForwardB(true);
	
		start();
	}

	// 0 <= a <= 200
	void setSpeedA(uint8_t a)
	{
		if (!a)
			OCR1AL = 0;
		else
			OCR1AL = a + 55;
	}

	void setSpeedB(uint8_t b)
	{
		if (!b)
			OCR1BL = 0;
		else
			OCR1BL = b + 55;
	}
	
	void setForwardA(bool forward)
	{
		if (forward)
		{
			PORTE |= (1 << 2);
			PORTE &= ~(1 << 3);
		}
		else
		{
			PORTE &= ~(1 << 2);
			PORTE |= (1 << 3);
		}
	}

	void setForwardB(bool forward)
	{
		if (forward)
		{
			PORTG |= (1 << 0);
			PORTG &= ~(1 << 1);
		}
		else
		{
			PORTG &= ~(1 << 0);
			PORTG |= (1 << 1);
		}
	}
};


template <class MotorDriver>
class RobbyMotorA : public MotorDriver
{
public:
	void doSetSpeed(int8_t s, bool forward)
	{
		MotorDriver::setSpeedA(s);
		MotorDriver::setForwardA(forward);
	}
};


template <class MotorDriver>
class RobbyMotorB : public MotorDriver
{
public:
	void doSetSpeed(int8_t s, bool forward)
	{
		MotorDriver::setSpeedB(s);
		MotorDriver::setForwardB(forward);
	}
};


