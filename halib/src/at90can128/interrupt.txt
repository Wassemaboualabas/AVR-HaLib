IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT0, Interrupt0)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT1, Interrupt1)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT2, Interrupt2)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT3, Interrupt3)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT4, Interrupt4)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT5, Interrupt5)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT6, Interrupt6)
IMPLEMENT_INTERRUPT_CLASS(SIG_INTERRUPT7, Interrupt7)
IMPLEMENT_INTERRUPT_CLASS(SIG_OUTPUT_COMPARE2, InterruptOutputCompare2)
IMPLEMENT_INTERRUPT_CLASS(SIG_OVERFLOW2, InterruptOverflow2)
IMPLEMENT_INTERRUPT_CLASS(SIG_INPUT_CAPTURE1, InterruptInputCapture1)
IMPLEMENT_INTERRUPT_CLASS(SIG_OUTPUT_COMPARE1A, InterruptOutputCompare1A)
IMPLEMENT_INTERRUPT_CLASS(SIG_OUTPUT_COMPARE1B, InterruptOutputCompare1B)
IMPLEMENT_INTERRUPT_CLASS(SIG_OVERFLOW1, InterruptOverflow1)
IMPLEMENT_INTERRUPT_CLASS(SIG_OUTPUT_COMPARE0, InterruptOutputCompare0)
IMPLEMENT_INTERRUPT_CLASS(SIG_OVERFLOW0, InterruptOverflow0)
IMPLEMENT_INTERRUPT_CLASS(SIG_SPI, InterruptSpi)
IMPLEMENT_INTERRUPT_CLASS(SIG_UART0_RECV, InterruptUartRecv)
IMPLEMENT_INTERRUPT_CLASS(SIG_UART0_DATA, InterruptUartData)
IMPLEMENT_INTERRUPT_CLASS(SIG_USART0_TRANS, InterruptUartTrans)
IMPLEMENT_INTERRUPT_CLASS(SIG_UART1_RECV, InterruptUart1Recv)
IMPLEMENT_INTERRUPT_CLASS(SIG_UART1_DATA, InterruptUart1Data)
IMPLEMENT_INTERRUPT_CLASS(SIG_USART1_TRANS, InterruptUart1Trans)
IMPLEMENT_INTERRUPT_CLASS(SIG_ADC, InterruptAdConvComplete)
IMPLEMENT_INTERRUPT_CLASS(SIG_EEPROM_READY, InterruptEepromReady)
IMPLEMENT_INTERRUPT_CLASS(SIG_COMPARATOR, InterruptComparator)
IMPLEMENT_INTERRUPT_CLASS(SIG_2WIRE_SERIAL, InterruptTwoWireSerial)
IMPLEMENT_INTERRUPT_CLASS(SIG_SPM_READY, InterruptSpmReady)
IMPLEMENT_INTERRUPT_CLASS(SIG_CAN_INTERRUPT1, InterruptCANInterrupt1)
IMPLEMENT_INTERRUPT_CLASS(SIG_CAN__OVERFLOW1, InterruptCANOverflow1)

DECLARE_INTERRUPT_CLASS(Interrupt0)			// External Interrupt Request 0
DECLARE_INTERRUPT_CLASS(Interrupt1)			// External Interrupt Request 1
DECLARE_INTERRUPT_CLASS(Interrupt2)			// External Interrupt Request 2
DECLARE_INTERRUPT_CLASS(Interrupt3)			// External Interrupt Request 3
DECLARE_INTERRUPT_CLASS(Interrupt4)			// External Interrupt Request 4
DECLARE_INTERRUPT_CLASS(Interrupt5)			// External Interrupt Request 5
DECLARE_INTERRUPT_CLASS(Interrupt6)			// External Interrupt Request 6
DECLARE_INTERRUPT_CLASS(Interrupt7)			// External Interrupt Request 7
DECLARE_INTERRUPT_CLASS(InterruptOutputCompare2)	// Timer/Counter2 Compare Match
DECLARE_INTERRUPT_CLASS(InterruptOverflow2)		// Timer/Counter2 Overflow
DECLARE_INTERRUPT_CLASS(InterruptInputCapture1)	// Timer/Counter1 Capture Event
DECLARE_INTERRUPT_CLASS(InterruptOutputCompare1A)	// Timer/Counter1 Compare Match A
DECLARE_INTERRUPT_CLASS(InterruptOutputCompare1B)	// Timer/Counter1 Compare Match B
DECLARE_INTERRUPT_CLASS(InterruptOverflow1)		// Timer/Counter1 Overflow
DECLARE_INTERRUPT_CLASS(InterruptOutputCompare0)	// Timer/Counter0 Compare Match
DECLARE_INTERRUPT_CLASS(InterruptOverflow0)		// Timer/Counter0 Overflow
DECLARE_INTERRUPT_CLASS(InterruptSpi)			// Serial Transfer Complete
DECLARE_INTERRUPT_CLASS(InterruptUartRecv)		// USART0 Rx Complete          *
DECLARE_INTERRUPT_CLASS(InterruptUartData)		// USART0 Data Register Empty  *
DECLARE_INTERRUPT_CLASS(InterruptUartTrans)		// USART0 Tx Complete          *
DECLARE_INTERRUPT_CLASS(InterruptUart1Recv)		// USART1 Rx Complete          *
DECLARE_INTERRUPT_CLASS(InterruptUart1Data)		// USART1 Data Register Empty  *
DECLARE_INTERRUPT_CLASS(InterruptUart1Trans)		// USART1 Tx Complete          *
DECLARE_INTERRUPT_CLASS(InterruptAdConvComplete)	// ADC Conversion Complete
DECLARE_INTERRUPT_CLASS(InterruptEepromReady)		// EEPROM Ready
DECLARE_INTERRUPT_CLASS(InterruptComparator)		// Analog Comparator
DECLARE_INTERRUPT_CLASS(InterruptTwoWireSerial)		// 2-wire Serial Interface
DECLARE_INTERRUPT_CLASS(InterruptSpmReady)		// Store Program Memory Ready
DECLARE_INTERRUPT_CLASS(InterruptCANInterrupt1)		// CAN Transfer Complete or Error
DECLARE_INTERRUPT_CLASS(InterruptCANOverflow1)		// CAN Timer Overrun


/* Timer/Counter1 Capture Event */
#define SIG_INPUT_CAPTURE1		_VECTOR(11)

/* Timer/Counter1 Compare Match A */
#define SIG_OUTPUT_COMPARE1A		_VECTOR(12)

/* Timer/Counter Compare Match B */
#define SIG_OUTPUT_COMPARE1B		_VECTOR(13)

/* Timer/Counter1 Compare Match C */
#define SIG_OUTPUT_COMPARE1C		_VECTOR(14)

/* Timer/Counter1 Overflow */
#define SIG_OVERFLOW1			_VECTOR(15)

/* Timer/Counter0 Compare Match */
#define SIG_OUTPUT_COMPARE0		_VECTOR(16)

/* Timer/Counter0 Overflow */
#define SIG_OVERFLOW0			_VECTOR(17)

/* Timer/Counter3 Capture Event */
#define SIG_INPUT_CAPTURE3		_VECTOR(27)

/* Timer/Counter3 Compare Match A */
#define SIG_OUTPUT_COMPARE3A		_VECTOR(28)

/* Timer/Counter3 Compare Match B */
#define SIG_OUTPUT_COMPARE3B		_VECTOR(29)

/* Timer/Counter3 Compare Match C */
#define SIG_OUTPUT_COMPARE3C		_VECTOR(30)

/* Timer/Counter3 Overflow */
#define SIG_OVERFLOW3			_VECTOR(31)
