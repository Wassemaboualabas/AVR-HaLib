/** \page can_implDetail CAN driver - Design and Implementation
 * 
 
 * \section genCon General Considerations

 * This driver was implemented with the ressource constraints of the at90canX
 * in mind. Therefore the driver itself had to be very efficient in terms of
 * memory usage and flash usage. To achieve this goal all parts of the driver
 * that would need a decent amount of memory and/or flash, are designed in a
 * configurable way. These parts can be activated and deactivated on a per
 * application basis, for the costs see \ref can_confCost.

 * The implementation itself consists of valid C++99-Code only, and by using
 * the template metaprogramming features of C++, the targeted flexibility is
 * achieved. To reduce the size of the driver, only the functions that are
 * needed in an application should be compiled and included in the resulting
 * binary. This is also provided by the template features of C++, which only
 * compile a function when it is used. Therefore unused driver parts, which are
 * not deactivated by the configuration will occupy lesser flash memory when
 * not used.
 
 * \section comps Component Layout

 * The driver itself consits of four main components (see Component
 * diagram).
 
 *	<CENTER>\dotfile components.dot "Components of the CAN driver"</CENTER>
 
 * The Configuration component influences the code of all other components and
 * provides an consistent interface to configure the other components. The
 * Hardware Abstraction Component provides an abstracted and more generic view
 * of a CAN capable microcontroller. The Interrupt Handler Component provided
 * means to register and handle Interrupt callbacks and finally the User API
 * Component, delivers a consistent nearly template free API to be used by the
 * user.

 * This component decomposition was choosen, because the individual parts can
 * easily be replaced, if one wants to create a driver, that has a different
 * focus. One example would be a change in the CAN hardware, which means the
 * Hardware Abstraction Component must be altered, but the other components can
 * be kept as they are as long as the abstract interface is no altered. The
 * same would apply to a TT-CAN driver, which would use polling instead of
 * interrupts as a mechanism to return information, this driver would remove
 * the Interrupt Handler component and maybe the User API component, but could
 * use the Hardware Abstraction and their configuration at it is.

 * \section confComp Configuration Component

 * This component handles the configuration of the other components. It 
 * delivers a default configuration, that can be extended or changed by the 
 * user. The propagation of the configuration is done by forwarding the template
 * parameter to the different components. The configuration values are 
 * enumeration values, so they can be used as variables in the classes, that
 * use the configuration. The extension of the default configuration is important
 * for every configuration, because all the enumerated values must have a value
 * or a compile error will occur.

 * \section haComp Hardware Abstraction Component
 
 * The Hardware Abstraction component consists of two main parts, which are the
 * register map and the abstract interface. The register map describes the
 * register of the CAN hardware, their content and their position in the
 * memory. It also provides access to the logical blocks of the register, that
 * means bits, which belong to the same parameter, can be accessed as one
 * variable. The concept is also used in the avr-halib and was taken from
 * there.  The abstract interface defines an interface which is only dependant
 * on CAN parameters like CAN version, but independant to the hardware.
 
 * The most important configuration parameters for this component is the CAN
 * version, because the meaning of some registers of the at90canX is changed by
 * this paramter, this is reflected by a templated regmap, which adepts itself
 * to the configuration by using template specialisation. Also th basic data
 * structures of the driver are dependant on this parameter too. They are
 * influenced because because the ID size of the two CAN version is different,
 * the data structure safes code and memory by shortening the used space for
 * id variables if CAN 2.0A is configured, which has only 11 bits Id instead of
 * 29 for CAN 2.0B. The second parameter that influences the data structure is
 * the useTimestamp parameter, which controls if the data structure has support
 * for timestamps, dependand on that, the abstract interface reads the
 * timestamps from the CAN hardware or not.
 
 * Another parameter of the configuration that influences the
 * Hardware Abstraction component is the prescaler of the internal timer. This
 * is mainly important if one wants receive timestamps with the messages and/or
 * wants to use the overrun interrupt of this timer. The prescaler parameter 
 * will be applied automatically by the driver and can not be changed at 
 * runtime.
 
 * \section ihComp Interrupt Handler Component
 
 * The Interrupt component is subdivided into three orthogonal parts, which all
 * can be de/activated independently of each other:
 
 *  - Reception
 *  - Transmission
 *  - Error handling
 
 * These three functionalities reside in their respective classes, which have a
 * linear inheritance relation. This relation is not reasoned by dependencies
 * between this classes, it is just a more efficient way, than using multiple
 * inheritance. All classes have a boolean template parameter, that decides if
 * the functionality exists in the driver or not. This parameter will be read
 * from the supplied configuration. Dependand on that value a special
 * implementation is choosen. 
 
 * All the three classes use the interrupt base class, which consits of the
 * functions for the overrun interrupt and the ram data that handles
 * interrupts. This class is influenced by the maxConcurrendMsg parameter of
 * the configuration, which declares how much space should be allocated for
 * message pointers. This defines the number of messages objects of the driver,
 * that can be active at one time.
 
 * \section uapiComp User API component
 
 * The User API uses the provided functions of the three interrupt classes.
 * Therefore if a functionality will be used in the program, that is not
 * configured to be active in the driver, a compile time error will occur. The
 * User API itself is not directly influenced by the configuration, but changes
 * in the lower components will propagate through the different interfaces into
 * this component. The final User API consists of the functions of the
 * activated components and the base class of the interrupts, no Hardware
 * abstraction functions are part of the API. There are only some debug
 * functionality, which can be accessed by the user API.
 **/
