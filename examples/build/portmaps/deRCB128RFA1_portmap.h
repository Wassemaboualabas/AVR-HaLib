// THIS FILE WAS GENERATED FROM FILE "/home/steup/eos/research/AVR-HaLib/platforms/deRCB128RFA1//portmap/deRCB128RFA1.portmap" BY AVR-HALIB PORTMAP GENERATOR 0.1
// DO NOT EDIT THIS FILE CAUSE CHANGES MAY BE OVERWRITTEN. CHANGE "/home/steup/eos/research/AVR-HaLib/platforms/deRCB128RFA1//portmap/deRCB128RFA1.portmap" INSTEAD!
#include "avr-halib/avr/portmap.h"
// Portmap for deRFtoRCB Adapter by dresden elektronik ingenieurtechnik gmbh 
// used in the EOS at university of magdeburg
// 
// Author:	Philipp Werner, Karl Fessel
//
// This file is part of avr-halib. See COPYING for copyright details.

#pragma once

#include <stdint.h>

// LedPortmap
struct Led0		// portmap for atmega128rfa1
{
	enum { onLevel = false };
	union
	{
		struct		// pin led: e 2;
		{
			uint8_t __pad0 [0x2c];
			uint8_t : 2;
			bool pin : 1;		// PINE (0x2c), bit 2
			uint8_t : 7;
			bool ddr : 1;		// DDRE (0x2d), bit 2
			uint8_t : 7;
			bool port : 1;		// PORTE (0x2e), bit 2
		} led;
	};
};

 
// LedPortmap
struct Led1		// portmap for atmega128rfa1
{
	enum { onLevel = false };
	union
	{
		struct		// pin led: e 3;
		{
			uint8_t __pad0 [0x2c];
			uint8_t : 3;
			bool pin : 1;		// PINE (0x2c), bit 3
			uint8_t : 7;
			bool ddr : 1;		// DDRE (0x2d), bit 3
			uint8_t : 7;
			bool port : 1;		// PORTE (0x2e), bit 3
		} led;
	};
};

 
// LedPortmap
struct Led2		// portmap for atmega128rfa1
{
	enum { onLevel = false };
	union
	{
		struct		// pin led: e 4;
		{
			uint8_t __pad0 [0x2c];
			uint8_t : 4;
			bool pin : 1;		// PINE (0x2c), bit 4
			uint8_t : 7;
			bool ddr : 1;		// DDRE (0x2d), bit 4
			uint8_t : 7;
			bool port : 1;		// PORTE (0x2e), bit 4
		} led;
	};
};


// LedBlock
struct LedBlock012		// portmap for atmega128rfa1
{
	enum { onLevel = 0x000 };
	union
	{
		struct		// pins led012: e 2-4;
		{
			uint8_t __pad0 [0x2c];
			uint8_t : 2;
			uint8_t pin : 3;		// PINE (0x2c), bit 2-4
			uint8_t : 5;
			uint8_t ddr : 3;		// DDRE (0x2d), bit 2-4
			uint8_t : 5;
			uint8_t port : 3;		// PORTE (0x2e), bit 2-4
		} led012;
		struct		// vport leds
		{
			union
			{
				struct		// pins led012: e 2-4;
				{
					uint8_t __pad0 [0x2c];
					uint8_t : 2;
					uint8_t pin : 3;		// PINE (0x2c), bit 2-4
					uint8_t : 5;
					uint8_t ddr : 3;		// DDRE (0x2d), bit 2-4
					uint8_t : 5;
					uint8_t port : 3;		// PORTE (0x2e), bit 2-4
				} led012;
			};
			uint8_t getPin()
			{
				SyncPortmap(*this);
				return (led012.pin);
			}
			void setPin(uint8_t i)
			{
				led012.pin = (i & 0x7);
			}
			uint8_t getPort()
			{
				SyncPortmap(*this);
				return (led012.port);
			}
			void setPort(uint8_t i)
			{
				led012.port = (i & 0x7);
			}
			uint8_t getDdr()
			{
				SyncPortmap(*this);
				return (led012.ddr);
			}
			void setDdr(uint8_t i)
			{
				led012.ddr = (i & 0x7);
			}
		} leds;
	};
};


 
// ButtonPortmap
struct Button0		// portmap for atmega128rfa1
{
	enum { pressedLevel = false, usePullup = true };
	union
	{
		struct		// pin button: e 5;
		{
			uint8_t __pad0 [0x2c];
			uint8_t : 5;
			bool pin : 1;		// PINE (0x2c), bit 5
			uint8_t : 7;
			bool ddr : 1;		// DDRE (0x2d), bit 5
			uint8_t : 7;
			bool port : 1;		// PORTE (0x2e), bit 5
		} button;
	};
};


/*
descrition Uart 6 Pin
pe1 tx0	1 2	vcc
pb1 sck	3 4	pe0 rx0
reset	5 6	gnd
*/




